{"version":3,"sources":["Config.js","NavBar.js","ErrorMessage.js","Welcome.js","GraphService.js","Calendar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","appId","redirectUri","scopes","UserAvatar","props","user","avatar","src","alt","className","style","width","AuthNavItem","isAuthenticated","UncontrolledDropdown","DropdownToggle","nav","caret","DropdownMenu","right","displayName","email","DropdownItem","divider","onClick","authButtonMethod","NavItem","NavLink","NavBar","toggle","bind","state","isOpen","this","setState","calendarLink","to","exact","Navbar","color","dark","expand","fixed","Container","NavbarBrand","href","NavbarToggler","Collapse","navbar","Nav","target","React","Component","ErrorMessage","debug","Alert","message","WelcomeContent","Button","Welcome","Jumbotron","graph","require","getAuthenticatedClient","accessToken","Client","init","authProvider","done","getUserDetails","a","client","api","get","getEvents","select","orderby","events","formatDateTime","dateTime","moment","utc","local","format","Calendar","window","msal","acquireTokenSilent","config","value","showError","JSON","stringify","Table","scope","map","event","key","id","organizer","emailAddress","name","subject","start","end","App","console","log","userAgentApplication","UserAgentApplication","auth","clientId","cache","cacheLocation","storeAuthStateInCookie","getAccount","error","getUserProfile","logout","login","path","render","setErrorMessage","loginPopup","prompt","errParts","split","length","mail","userPrincipalName","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0de6c268.chunk.js","sourcesContent":["module.exports = {\r\n  appId: 'b5bec270-f009-4efa-aa2b-7142e4fa7c2f',\r\n  redirectUri: 'http://localhost:3000',\r\n  scopes: [\r\n    'user.read',\r\n    'calendars.read'\r\n  ]\r\n};","import React from 'react';\r\nimport { NavLink as RouterNavLink } from 'react-router-dom';\r\nimport {\r\n  Collapse,\r\n  Container,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem } from 'reactstrap';\r\nimport '@fortawesome/fontawesome-free/css/all.css';\r\n\r\nfunction UserAvatar(props) {\r\n  // If a user avatar is available, return an img tag with the pic\r\n  if (props.user.avatar) {\r\n    return <img\r\n            src={props.user.avatar} alt=\"user\"\r\n            className=\"rounded-circle align-self-center mr-2\"\r\n            style={{width: '32px'}}></img>;\r\n  }\r\n\r\n  // No avatar available, return a default icon\r\n  return <i\r\n          className=\"far fa-user-circle fa-lg rounded-circle align-self-center mr-2\"\r\n          style={{width: '32px'}}></i>;\r\n}\r\n\r\nfunction AuthNavItem(props) {\r\n  // If authenticated, return a dropdown with the user's info and a\r\n  // sign out button\r\n  if (props.isAuthenticated) {\r\n    return (\r\n      <UncontrolledDropdown>\r\n        <DropdownToggle nav caret>\r\n          <UserAvatar user={props.user}/>\r\n        </DropdownToggle>\r\n        <DropdownMenu right>\r\n          <h5 className=\"dropdown-item-text mb-0\">{props.user.displayName}</h5>\r\n          <p className=\"dropdown-item-text text-muted mb-0\">{props.user.email}</p>\r\n          <DropdownItem divider />\r\n          <DropdownItem onClick={props.authButtonMethod}>Sign Out</DropdownItem>\r\n        </DropdownMenu>\r\n      </UncontrolledDropdown>\r\n\r\n    );\r\n  }\r\n\r\n  // Not authenticated, return a sign in link\r\n  return (\r\n    <NavItem>\r\n      <NavLink onClick={props.authButtonMethod}>Sign In</NavLink>\r\n    </NavItem>\r\n  );\r\n}\r\n\r\nexport default class NavBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n    this.state = {\r\n      isOpen: false\r\n    };\r\n  }\r\n\r\n  toggle() {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  }\r\n\r\n  render() {\r\n    // Only show calendar nav item if logged in\r\n    let calendarLink = null;\r\n    if (this.props.isAuthenticated) {\r\n      calendarLink = (\r\n        <NavItem>\r\n          <RouterNavLink to=\"/calendar\" className=\"nav-link\" exact>Calendar</RouterNavLink>\r\n        </NavItem>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Navbar color=\"dark\" dark expand=\"md\" fixed=\"top\">\r\n          <Container>\r\n            <NavbarBrand href=\"/\">React Graph Tutorial</NavbarBrand>\r\n            <NavbarToggler onClick={this.toggle} />\r\n            <Collapse isOpen={this.state.isOpen} navbar>\r\n              <Nav className=\"mr-auto\" navbar>\r\n                <NavItem>\r\n                  <RouterNavLink to=\"/\" className=\"nav-link\" exact>Home</RouterNavLink>\r\n                </NavItem>\r\n                {calendarLink}\r\n              </Nav>\r\n              <Nav className=\"justify-content-end\" navbar>\r\n                <NavItem>\r\n                  <NavLink href=\"https://developer.microsoft.com/graph/docs/concepts/overview\" target=\"_blank\">\r\n                    <i className=\"fas fa-external-link-alt mr-1\"></i>\r\n                    Docs\r\n                  </NavLink>\r\n                </NavItem>\r\n                <AuthNavItem\r\n                  isAuthenticated={this.props.isAuthenticated}\r\n                  authButtonMethod={this.props.authButtonMethod}\r\n                  user={this.props.user} />\r\n              </Nav>\r\n            </Collapse>\r\n          </Container>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport { Alert } from 'reactstrap';\r\n\r\nexport default class ErrorMessage extends React.Component {\r\n  render() {\r\n    let debug = null;\r\n    if (this.props.debug) {\r\n      debug = <pre className=\"alert-pre border bg-light p-2\"><code>{this.props.debug}</code></pre>;\r\n    }\r\n    return (\r\n      <Alert color=\"danger\">\r\n        <p className=\"mb-3\">{this.props.message}</p>\r\n        {debug}\r\n      </Alert>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport {\r\n  Button,\r\n  Jumbotron } from 'reactstrap';\r\n\r\nfunction WelcomeContent(props) {\r\n  // If authenticated, greet the user\r\n  if (props.isAuthenticated) {\r\n    return (\r\n      <div>\r\n        <h4>Welcome {props.user.displayName}!</h4>\r\n        <p>Use the navigation bar at the top of the page to get started.</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Not authenticated, present a sign in button\r\n  return <Button color=\"primary\" onClick={props.authButtonMethod}>Click here to sign in</Button>;\r\n}\r\n\r\nexport default class Welcome extends React.Component {\r\n  render() {\r\n    return (\r\n      <Jumbotron>\r\n        <h1>React Graph Tutorial</h1>\r\n        <p className=\"lead\">This sample app shows how to use the Microsoft Graph API to access Outlook and OneDrive data from React</p>\r\n        <WelcomeContent\r\n          isAuthenticated={this.props.isAuthenticated}\r\n          user={this.props.user}\r\n          authButtonMethod={this.props.authButtonMethod} />\r\n      </Jumbotron>\r\n    );\r\n  }\r\n}","var graph = require('@microsoft/microsoft-graph-client');\r\n\r\nfunction getAuthenticatedClient(accessToken) {\r\n  // Initialize Graph client\r\n  const client = graph.Client.init({\r\n    // Use the provided access token to authenticate\r\n    // requests\r\n    authProvider: (done) => {\r\n      done(null, accessToken.accessToken);\r\n    }\r\n  });\r\n\r\n  return client;\r\n}\r\n\r\nexport async function getUserDetails(accessToken) {\r\n  const client = getAuthenticatedClient(accessToken);\r\n\r\n  const user = await client.api('/me').get();\r\n  return user;\r\n}\r\n\r\nexport async function getEvents(accessToken) {\r\n  const client = getAuthenticatedClient(accessToken);\r\n\r\n  const events = await client\r\n    .api('/me/events')\r\n    .select('subject,organizer,start,end')\r\n    .orderby('createdDateTime DESC')\r\n    .get();\r\n\r\n  return events;\r\n}","import React from 'react';\r\nimport { Table } from 'reactstrap';\r\nimport moment from 'moment';\r\nimport config from './Config';\r\nimport { getEvents } from './GraphService';\r\n\r\nfunction formatDateTime(dateTime) {\r\n  return moment.utc(dateTime).local().format('M/D/YY h:mm A');\r\n}\r\n\r\nexport default class Calendar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      events: []\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      // Get the user's access token\r\n      var accessToken = await window.msal.acquireTokenSilent({\r\n        scopes: config.scopes\r\n      });\r\n      // Get the user's events\r\n      var events = await getEvents(accessToken);\r\n      // Update the array of events in state\r\n      this.setState({events: events.value});\r\n    }\r\n    catch(err) {\r\n      this.props.showError('ERROR', JSON.stringify(err));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Calendar</h1>\r\n        <Table>\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\">Organizer</th>\r\n              <th scope=\"col\">Subject</th>\r\n              <th scope=\"col\">Start</th>\r\n              <th scope=\"col\">End</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.state.events.map(\r\n              function(event){\r\n                return(\r\n                  <tr key={event.id}>\r\n                    <td>{event.organizer.emailAddress.name}</td>\r\n                    <td>{event.subject}</td>\r\n                    <td>{formatDateTime(event.start.dateTime)}</td>\r\n                    <td>{formatDateTime(event.end.dateTime)}</td>\r\n                  </tr>\r\n                );\r\n              })}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport { Container } from 'reactstrap';\r\nimport { UserAgentApplication } from 'msal';\r\nimport NavBar from './NavBar';\r\nimport ErrorMessage from './ErrorMessage';\r\nimport Welcome from './Welcome';\r\nimport config from './Config';\r\nimport { getUserDetails } from './GraphService';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport Calendar from './Calendar';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    console.log(JSON.stringify(props));\r\n\r\n    this.userAgentApplication = new UserAgentApplication({\r\n        auth: {\r\n            clientId: config.appId,\r\n            redirectUri: config.redirectUri\r\n        },\r\n        cache: {\r\n            cacheLocation: \"localStorage\",\r\n            storeAuthStateInCookie: true\r\n        }\r\n    });\r\n\r\n    var user = this.userAgentApplication.getAccount();\r\n\r\n    this.state = {\r\n      isAuthenticated: (user !== null),\r\n      user: {},\r\n      error: null\r\n    };\r\n\r\n    if (user) {\r\n      // Enhance user object with data from Graph\r\n      this.getUserProfile();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let error = null;\r\n    if (this.state.error) {\r\n      error = <ErrorMessage message={this.state.error.message} debug={this.state.error.debug} />;\r\n    }\r\n\r\n    return (\r\n      <Router>\r\n        <div>\r\n          <NavBar\r\n            isAuthenticated={this.state.isAuthenticated}\r\n            authButtonMethod={this.state.isAuthenticated ? this.logout.bind(this) : this.login.bind(this)}\r\n            user={this.state.user}/>\r\n          <Container>\r\n            {error}\r\n            <Route exact path=\"/\"\r\n              render={(props) =>\r\n                <Welcome {...props}\r\n                  isAuthenticated={this.state.isAuthenticated}\r\n                  user={this.state.user}\r\n                  authButtonMethod={this.login.bind(this)} />\r\n              } />\r\n            <Route exact path=\"/calendar\"\r\n              render={(props) =>\r\n                <Calendar {...props}\r\n                  showError={this.setErrorMessage.bind(this)} />\r\n              } />\r\n          </Container>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n\r\n  setErrorMessage(message, debug) {\r\n    this.setState({\r\n      error: {message: message, debug: debug}\r\n    });\r\n  }\r\n\r\n  async login() {\r\n    try {\r\n      await this.userAgentApplication.loginPopup(\r\n        {\r\n          scopes: config.scopes,\r\n          prompt: \"select_account\"\r\n      });\r\n      await this.getUserProfile();\r\n    }\r\n    catch(err) {\r\n      var error = {};\r\n\r\n      if (typeof(err) === 'string') {\r\n        var errParts = err.split('|');\r\n        error = errParts.length > 1 ?\r\n          { message: errParts[1], debug: errParts[0] } :\r\n          { message: err };\r\n      } else {\r\n        error = {\r\n          message: err.message,\r\n          debug: JSON.stringify(err)\r\n        };\r\n      }\r\n\r\n      this.setState({\r\n        isAuthenticated: false,\r\n        user: {},\r\n        error: error\r\n      });\r\n    }\r\n  }\r\n\r\n  logout() {\r\n    this.userAgentApplication.logout();\r\n  }\r\n\r\n  async getUserProfile() {\r\n    try {\r\n      // Get the access token silently\r\n      // If the cache contains a non-expired token, this function\r\n      // will just return the cached token. Otherwise, it will\r\n      // make a request to the Azure OAuth endpoint to get a token\r\n\r\n      var accessToken = await this.userAgentApplication.acquireTokenSilent({\r\n        scopes: config.scopes\r\n      });\r\n\r\n      if (accessToken) {\r\n        // Get the user's profile from Graph\r\n        var user = await getUserDetails(accessToken);\r\n        this.setState({\r\n          isAuthenticated: true,\r\n          user: {\r\n            displayName: user.displayName,\r\n            email: user.mail || user.userPrincipalName\r\n          },\r\n          error: null\r\n        });\r\n      }\r\n    }\r\n    catch(err) {\r\n      var error = {};\r\n      if (typeof(err) === 'string') {\r\n        var errParts = err.split('|');\r\n        error = errParts.length > 1 ?\r\n          { message: errParts[1], debug: errParts[0] } :\r\n          { message: err };\r\n      } else {\r\n        error = {\r\n          message: err.message,\r\n          debug: JSON.stringify(err)\r\n        };\r\n      }\r\n\r\n      this.setState({\r\n        isAuthenticated: false,\r\n        user: {},\r\n        error: error\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}